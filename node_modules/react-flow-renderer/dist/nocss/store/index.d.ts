import { ReactFlowState, ConnectionMode } from '../types';
export declare const initialState: ReactFlowState;
declare const store: import("redux").Store<ReactFlowState, {
    type: "SET_ON_CONNECT";
    payload: {
        onConnect: import("../types").OnConnectFunc;
    };
} | {
    type: "SET_ON_CONNECT_START";
    payload: {
        onConnectStart: import("../types").OnConnectStartFunc;
    };
} | {
    type: "SET_ON_CONNECT_STOP";
    payload: {
        onConnectStop: import("../types").OnConnectStopFunc;
    };
} | {
    type: "SET_ON_CONNECT_END";
    payload: {
        onConnectEnd: import("../types").OnConnectEndFunc;
    };
} | {
    type: "SET_ELEMENTS";
    payload: import("../types").Elements<any>;
} | {
    type: "UPDATE_NODE_DIMENSIONS";
    payload: import("../types").NodeDimensionUpdate[];
} | {
    type: "UPDATE_NODE_POS";
    payload: import("../types").NodePosUpdate;
} | {
    type: "UPDATE_NODE_POS_DIFF";
    payload: import("../types").NodeDiffUpdate;
} | {
    type: "SET_USER_SELECTION";
    payload: import("../types").XYPosition;
} | {
    type: "UPDATE_USER_SELECTION";
    payload: import("../types").XYPosition;
} | {
    type: "UNSET_USER_SELECTION";
} | {
    type: "SET_SELECTION";
    payload: {
        selectionActive: boolean;
    };
} | {
    type: "UNSET_NODES_SELECTION";
    payload: {
        nodesSelectionActive: boolean;
    };
} | {
    type: "RESET_SELECTED_ELEMENTS";
    payload: {
        selectedElements: null;
    };
} | {
    type: "SET_SELECTED_ELEMENTS";
    payload: import("../types").Elements<any>;
} | {
    type: "ADD_SELECTED_ELEMENTS";
    payload: import("../types").Elements<any>;
} | {
    type: "UPDATE_TRANSFORM";
    payload: {
        transform: import("../types").Transform;
    };
} | {
    type: "UPDATE_SIZE";
    payload: {
        width: number;
        height: number;
    };
} | {
    type: "INIT_D3ZOOM";
    payload: import("../types").InitD3ZoomPayload;
} | {
    type: "SET_MINZOOM";
    payload: number;
} | {
    type: "SET_MAXZOOM";
    payload: number;
} | {
    type: "SET_TRANSLATEEXTENT";
    payload: import("../types").TranslateExtent;
} | {
    type: "SET_CONNECTION_POSITION";
    payload: {
        connectionPosition: import("../types").XYPosition;
    };
} | {
    type: "SET_CONNECTION_NODEID";
    payload: import("../types").SetConnectionId;
} | {
    type: "SET_SNAPTOGRID";
    payload: {
        snapToGrid: boolean;
    };
} | {
    type: "SET_SNAPGRID";
    payload: {
        snapGrid: import("../types").SnapGrid;
    };
} | {
    type: "SET_INTERACTIVE";
    payload: {
        nodesDraggable: boolean;
        nodesConnectable: boolean;
        elementsSelectable: boolean;
    };
} | {
    type: "SET_NODES_DRAGGABLE";
    payload: {
        nodesDraggable: boolean;
    };
} | {
    type: "SET_NODES_CONNECTABLE";
    payload: {
        nodesConnectable: boolean;
    };
} | {
    type: "SET_ELEMENTS_SELECTABLE";
    payload: {
        elementsSelectable: boolean;
    };
} | {
    type: "SET_MULTI_SELECTION_ACTIVE";
    payload: {
        multiSelectionActive: boolean;
    };
} | {
    type: "SET_CONNECTION_MODE";
    payload: {
        connectionMode: ConnectionMode;
    };
} | {
    type: "SET_NODE_EXTENT";
    payload: import("../types").TranslateExtent;
}>;
export declare type ReactFlowDispatch = typeof store.dispatch;
export default store;
